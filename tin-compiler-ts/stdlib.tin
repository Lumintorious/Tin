# Order in this file is important
external "
export const Anything = _S(Symbol(\"Anything\"), () => undefined, lazy(() => Type(\"Anything\", [(n) => true], [(n) => true])));
"

Type = data:
	name: String 
	check = (obj: Anything) -> false: Boolean
	checkIntegrity = (obj: Anything) -> false: Boolean
	is = (parent: Type) -> false: Boolean

Type@of: (obj: Anything) -> Type = external

Field = data:
	name: String
	type: Type
	defaultValue: (() -> Anything)?

Parameter = data:
	name: String?
	type: Type
	defaultValue: (() -> Anything)?

Intersection = Type & data:
	left: Type
	right: Type

Union = Type & data:
	left: Type
	right: Type

Array = [T] -> data:
	at: (Number) -> T?
	length: () -> T

Struct = Type & data:
	fields: Array[Field]

Struct.accessDynamically: (self: Struct, obj: Anything, field: Field) -> Anything | Nothing = external
Struct.createDynamically: (self: Struct, fields: Array[Anything]) -> Anything | Nothing = external

Lambda = Type & data:
	params: Array[Parameter]
	resultType: Type

RefType = Type & data:
	get: () -> Type

Refinement = Type & data:
	test: (any: Anything) -> Boolean

external "
export const Nothing = _S(Symbol(\"Nothing\"), () => undefined, lazy(Type(\"Nothing\", \{_:(n) => n === null || n === undefined\}, \{_:(n) => n === null || n === undefined})));
export const Never = _S(Symbol(\"Never\"), () => undefined, lazy(Type(\"Never\", \{_:(n) => n === undefined}, \{_:(n) => n === undefined})));
export const Number = _S(Symbol(\"Number\"), (i) => Number(i), lazy(Type(\"Number\", \{_:(n) => typeof n === \"number\"\}, \{_:(n) => typeof n === \"number\"})));
export const String = _S(Symbol(\"String\"), (s) => String(s), lazy(Type(\"String\", \{_:(n) => typeof n === \"string\"}, \{_:(n) => typeof n === \"string\"})));
"

Literal = Type & data:
	value: String | Number | Boolean | Nothing
	type: Type

jsonify: (obj: Anything) -> String = external
dejsonify: (json: String) -> Anything = external
assert: (condition: Boolean, message: String?) -> Nothing = external
print: (Anything) -> Nothing = external
printRaw: (Anything) -> Nothing = external
debug: (Anything) -> Nothing = external
clojure: (Anything) -> Nothing = external
nothing: Nothing = external
Array.of: [T] -> (Array[T]) -> Array[T] = external
Array.empty: [T] -> Array[T] = external

Intersection@of = (left: Type, right: Type) ->
	check = (obj: Anything) ->
		left.check(obj) && right.check(obj)

	checkIntegrity = (obj: Anything) ->
		left.checkIntegrity(obj) && right.checkIntegrity(obj)

	Type("Intersection", check, checkIntegrity) & Intersection(left, right)

Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
One = 1

Error = data:
	message: String
	object: Anything?

ToString = data:
	toString: () -> String

Tuple2 = [A, B] => data:
	left: A
	right: B

Tuple3 = [A, B, C] => data:
	left: A
	middle: B
	right: C

String.matches: (self: String, regex: String) -> Boolean = external
String.length: (self: String) -> Number = external
String.isBlank = (self: String) -> self.length() == 0

external "
export function String$length() \{
	return this.length
\}
"

# Union@values = [T] ->
# 	go = (type: Type): Array[T] ->
# 		if type :: Literal,
# 			Array@of[T]((type.value): T)
# 		else if type :: Union,
# 			go(type.left).and(go(type.right))
# 		else
# 			Array@of[T]()
# 	go(T)

# external "
	

# console.log('>>>> JS TEST')
# console.log(Nothing.__is_child(null))
# console.log(Nothing.__is_child(undefined))
# console.log(Nothing.__is_child(\{_: undefined\}))


# console.log('<<<< JS TEST')
# "

