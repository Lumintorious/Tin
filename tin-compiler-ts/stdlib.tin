# Order in this file is important
external "
export const Anything = _S(Symbol(\"Anything\"), () => undefined, lazy(() => Type(\{_:\"Anything\"\}, \{_:(n) => true\}, \{_:(n) => true\})));
"

Type = struct:
	name: String 
	check = (obj: Anything) -> false: Boolean
	checkIntegrity = (obj: Anything) -> false: Boolean
	is = (parent: Type) -> false: Boolean

Type.of: (obj: Anything) -> Type = external

Primitive = Type & struct

Field = struct:
	name: String
	type: Type
	defaultValue: (() -> Anything)?

Parameter = struct:
	name: String?
	type: Type
	defaultValue: (() -> Anything)?

Intersection = Type & struct:
	left: Type
	right: Type

Union = Type & struct:
	left: Type
	right: Type

Iterator = [T] => struct:
	next: () -> T?

AsyncIterator = [T] => struct:
	next: () ~> T?

Iterable = [T] => struct:
	makeIterator: () -> Iterator[T]

Seq = [T] => Iterable[T] & struct:
	at: (Number) -> T?
	length: () -> Number

VSeq = [T] => struct:
	at: (Number) -> T?
	put: (Number, T) -> Nothing | Error
	length: () -> Number

Struct = Type & struct:
	fields: Seq[Field]

Struct.accessDynamically: (self: Struct, obj: Anything, field: Field) -> Anything | Nothing = external
Struct.createDynamically: (self: Struct, fields: Seq[Anything]) -> Anything | Nothing = external

Lambda = Type & struct:
	params: Seq[Parameter]
	resultType: Type

RefType = Type & struct:
	get: () -> Type

Refinement = Type & struct:
	test: (any: Anything) -> Boolean

external "
export const Nothing = _S(Symbol(\"Nothing\"), () => undefined, lazy(Type(\"Nothing\", \{_:(n) => n === null || n === undefined\}, \{_:(n) => n === null || n === undefined})))._and(Primitive());
export const Never = _S(Symbol(\"Never\"), () => undefined, lazy(Type(\"Never\", \{_:(n) => n === undefined}, \{_:(n) => n === undefined})))._and(Primitive());
export const Number = _S(Symbol(\"Number\"), (i) => Number(i), lazy(Type(\"Number\", \{_:(n) => typeof n === \"number\"\}, \{_:(n) => typeof n === \"number\"})))._and(Primitive());
export const String = _S(Symbol(\"String\"), (s) => String(s), lazy(Type(\"String\", \{_:(n) => typeof n === \"string\"}, \{_:(n) => typeof n === \"string\"})))._and(Primitive());
export const Boolean = _S(Symbol(\"Boolean\"), (s) => !!s, lazy(Type(\"Boolean\", \{_: (n) => typeof n === \"boolean\"}, \{_:(n) => typeof n === \"boolean\"})))._and(Primitive());
export const ok = Symbol(\"ok\")
export const Ok = _S(Symbol(\"Ok\"), () => ok, lazy(Type(\"Ok\", \{_: (n) => n === ok}, \{_:(n) => n === ok})))._and(Primitive());
"

Singleton = Type & struct:
	value: Anything
	type: Type
	declaration: String?

jsonify: (obj: Anything) -> String = external
dejsonify: (json: String) -> Anything = external
assert: (condition: Boolean, message: String?) -> Nothing = external
print: (Anything) -> Nothing = external
printRaw: (Anything) -> Nothing = external
printTable: (Anything) -> Nothing = external
debug: (Anything) -> Nothing = external
debugThis: () -> Nothing = external
clojure: (Anything) -> Nothing = external
nothing: Nothing = external
ok: Ok = external
panic: (message: String) -> Never = external
Array.of: [T] -> (Seq[T]) -> Seq[T] = external
Array.empty: [T] -> Seq[T] = external
Seq.and: [T] -> (self: Seq[T], other: Seq[T]) -> Seq[T] = external
toString: (obj: Anything) -> String = external
listen: [T] -> (v: var T, onChange: (T) -> Nothing) -> Nothing = external
id = [T] -> (t: T) -> t
delay: (ms: Number, fn: () -> Nothing) -> Nothing = external
Console.useFieldNames = var true

Seq.mapSeq: [T, R] -> (self: Seq[T], fn: (T) -> R) -> Seq[R] = external
external "
	export function Seq$mapSeq(T, R) \{
		return function(fn) \{
			const self = this;
			const arr = _JsArr(self[Seq._s].length._())
			for (let i = 0; i < arr.length; i++) \{
				arr[i] = fn(self[Seq._s].at._(i))
			\}
			return Seq$createProperly(R)(
				arr
			)
		\}
	}
"


Like = [Str] => String where:
	if Str :: Singleton,
		v = Str.value
		if v :: String,
			return self.matches("^{v}$")
		
	false

Interpolation = struct:
	codeDisplay: String
	value: Anything

InterpolatedString = struct:
	elements: Seq[String | Interpolation]

Intersection.of = (left: Type, right: Type) ->
	check = (obj: Anything) ->
		left.check(obj) && right.check(obj)

	checkIntegrity = (obj: Anything) ->
		left.checkIntegrity(obj) && right.checkIntegrity(obj)

	Type { "Intersection", check, checkIntegrity } & Intersection { left, right }

Digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
One = 1

Error = struct:
	message: String
	object: Anything?

StackInfo = struct:
	stack: Seq[String]

ToString = struct:
	toString: () -> String

Tuple2 = [A, B] => struct:
	left: A
	right: B

Tuple3 = [A, B, C] => struct:
	left: A
	middle: B
	right: C

String.matches: (self: String, regex: String) -> Boolean = external
String.length: (self: String) -> Number = external
String.isBlank = (self: String) -> self.length() == 0

external "
export function String$length() \{
	return this.length
\}
"

Type.allFields = (self: Type): Seq[(Struct, Field)] ->
	if self :: Struct,
		mapper = (field: Field) -> (self, field: Field)
		self.fields.mapSeq(mapper)
	else if self :: Intersection,
		(self.left.allFields()) .and (self.right.allFields())
	else
		Array.empty[(Struct, Field)]

Type.allPossibilities = (self: Type): Seq[Anything] ->
	if self :: Singleton,
		Array.of(self.value)
	else if self :: Union,
		(self.left.allPossibilities()) .and (self.right.allPossibilities())
	else
		Array.empty[Anything]

Varray.of: [T] -> (length: Number, filler: T) -> VSeq[T] = external
	
external "
export const Varray$of = (T) => (len, obj) => \{
	const jarr = _JsArr(len).fill(obj)
	return VSeq(T)(
		\{_: (i) => jarr[i]},
		\{_: (i, obj) => jarr[i] = obj},
		\{_: () => jarr.length}
	)
\}
"

