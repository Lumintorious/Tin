Type = type:
	name: String

RefType = Type & type:
	get: () -> Type

Field = type:
	name: String
	tpe: Type
	defaultValue: (() -> Any)?

Parameter = type:
	name: String?
	tpe: Type
	defaultValue: (() -> Any)?

Struct = Type & type:
	fields: Array[Field]

Lambda = Type & type:
	name: String?
	params: Array[Parameter]

s = Type("S") & Struct(Array@of[Field]())

jsonify: (obj: Any) -> String = external
dejsonify: (json: String) -> Any = external
