{
   "scopeName": "source.tin",
   "patterns": [
      {
         "name": "comment.tin",
         "match": "#.*?#|#.*?$"
      },
      {
         "name": "keyword.tin",
         "match": "\\b(type|info|not|or|and|if|where|var|else|while|copy|refined|return|external|struct|set|import|this|self|unchecked|link|private)\\b"
      },
      {
         "name": "constant.tin",
         "match": "\\b(true|false|nothing|this|ok)\\b"
      },
      {
         "match": "\\.*([\\@a-z][a-zA-Z0-9_]*)[ ]*(=|:)[ ]*(\\(|\\[)",
         "name": "entity.name.function.tin",
         "captures": {
            "1": {
               "name": "entity.name.function.tin"
            },
            "2": {
               "name": "operator.tin"
            },
            "3": {
               "name": "operator.tin"
            }
         }
      },
      {
         "match": "([\\@a-z][a-zA-Z0-9_]*)(\\?\\(|\\(|\\[|\\?\\[)",
         "name": "entity.name.function.tin",
         "captures": {
            "1": {
               "name": "entity.name.function.tin"
            },
            "2": {
               "name": "operator.tin"
            }
         }
      },
      {
         "match": "(\\.)([\\@a-z][a-zA-Z0-9_]*)(\\?\\(|\\(|\\[|\\?\\[)",
         "name": "variable.other.property.tin",
         "captures": {
            "1": {
               "name": "operator.tin"
            },
            "2": {
               "name": "entity.name.function.tin"
            },
            "3": {
               "name": "operator.tin"
            }
         }
      },
      {
         "match": "(\\.)([\\@A-Za-z][a-zA-Z0-9_]*)",
         "name": "variable.other.property.tin",
         "captures": {
            "1": {
               "name": "operator.tin"
            },
            "2": {
               "name": "variable.other.property.tin"
            }
         }
      },
      {
         "name": "variable.parameter.tin",
         "match": "([\\@a-z][a-zA-Z0-9_]*)"
      },
      {
         "name": "constant.numeric.tin",
         "match": "\\b\\d+\\b"
      },
      {
         "name": "string.tin",
         "begin": "(?<!\\\\)\"",
         "end": "(?<!\\\\)\"",
         "beginCaptures": {
            "0": { "name": "string.tin" }
         },
         "endCaptures": {
            "0": { "name": "string.tin" }
         },
         "patterns": [
            {
               "name": "string.tin",
               "begin": "\\{",
               "end": "\\}",
               "beginCaptures": {
                  "0": {
                     "name": "punctuation.tin"
                  }
               },
               "endCaptures": {
                  "0": {
                     "name": "punctuation.tin"
                  }
               },
               "patterns": [
                  {
                     "match": "(\\.*[\\@a-z][a-zA-Z0-9_]*)(\\?\\(|\\(|\\[|\\?\\[)",
                     "name": "entity.name.function.tin",
                     "captures": {
                        "1": {
                           "name": "entity.name.function.tin"
                        },
                        "2": {
                           "name": "operator.tin"
                        }
                     }
                  },
                  {
                     "match": "(\\.)([\\@A-Za-z][a-zA-Z0-9_]*)",
                     "name": "variable.other.property.tin",
                     "captures": {
                        "1": {
                           "name": "operator.tin"
                        },
                        "2": {
                           "name": "variable.other.property.tin"
                        }
                     }
                  },
                  {
                     "name": "entity.name.type.tin",
                     "match": "([A-Z][a-zA-Z0-9]*)"
                  },
                  {
                     "name": "keyword.tin",
                     "match": "\\b(type|info|not|or|and|if|where|var|else|while|copy|refined|return|external|struct|set|import|this|self|unchecked|link|private)\\b"
                  },
                  {
                     "name": "constant.tin",
                     "match": "\\b(true|false|nothing|this|ok)\\b"
                  },
                  {
                     "name": "operator.tin",
                     "match": "[+\\-*/=<>!&:]+"
                  },
                  {
                     "name": "punctuation.tin",
                     "match": "[{}()\\[\\];,]"
                  },
                  {
                     "name": "constant.numeric.tin",
                     "match": "\\b\\d+\\b"
                  },
                  {
                     "name": "variable.parameter.tin",
                     "match": "[\\@a-zA-Z_][a-zA-Z0-9_]*"
                  }
               ]
            },
            {
               "name": "constant.character.escape.tin",
               "match": "\\\\"
            },
            {
               "name": "string.tin",
               "match": "(?:[^\\\\{}\"\\n]|\\\\[^{}\\n])*"
            }
         ]
      },
      {
         "name": "operator.tin",
         "match": "[+\\-*/=<>!&:]+"
      },
      {
         "name": "punctuation.tin",
         "match": "[{}()\\[\\];,]"
      },
      {
         "name": "entity.name.type.tin",
         "match": "([A-Z][a-zA-Z0-9]*)"
      }
   ],
   "repository": {}
}
