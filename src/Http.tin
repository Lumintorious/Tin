import collections/Iterable

HttpMethod = "GET" | "POST" | "PUT" | "DELETE"
UrlParams = Array[(String, String)]
Headers = Array[(String, String)]

UrlString = String where:
	self.matches("^(https?:\/\/)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z]\{2,\}(?:\/[a-zA-Z0-9\-\.]*)*\/?$")

Port = Number where:
	self >= 0 && self < 65536

Byte = Number where:
	self >= 0 && self < 256

Status = Number where:
	self > 100 && self < 600

ByteBuffer = Array[Byte]

Url = struct:
	baseUrl: UrlString
	port: Port
	params: UrlParams

Request = struct:
	method: HttpMethod
	url: Url
	headers: Headers
	body: ByteBuffer

Response = struct:
	status: Number
	headers: Headers
	body: String

Url.make = (url: String, port: Number = 80, params: UrlParams = Array.empty[(String, String)]) ->
	if url !: UrlString, return Error("Url was wrong")
	if port !: Port, return Error("Port was wrong")
	
	Url(url, port, params)

Url.fromString: (String) -> Url | Error = external

Request.make = (method: HttpMethod, urlTry: Url | Error, headers: Headers = Array.empty[(String, String)], body: ByteBuffer = Array.empty[Byte]) ->
	Request(method, urlTry?, headers, body)


external "
export function Url$fromString(str) \{
	const url = new URL(str);

	console.log(url.hostname);  // 'example.com'
	console.log(url.port);      // '8080'
	console.log(url.searchParams.get('foo')); // 'bar'
\}

export async function Http$send(request) \{
	const url = request[Request._s].url._
	const params = \{\};
	params.method = request[Request._s].method._
	params.headers = \{\}
	for(let i = 0; i < request[Request._s].headers._[Array._s].length._(); i++) \{
		const elem = request[Request._s].headers._[Array._s].at._(i)
		params.headers[elem[Tuple2._s].left._] = elem[Tuple2._s].right._
	\}

	const urlParams = new URLSearchParams();
	for(let i = 0; i < url[Url._s].params._[Array._s].length._(); i++) \{
		const elem = url[Url._s].params._[Array._s].at._(i)
		urlParams.set(elem[Tuple2._s].left._, elem[Tuple2._s].right._)
	\}
	
	const urlString = url[Url._s].baseUrl._ + '?' + urlParams.toString()
	console.log(urlString)

	const responseRaw = await fetch(urlString, params);

	const jsonRes = await responseRaw.text();
	const headers = [];
	for(const [k, v] of responseRaw.headers) \{
		headers.push(Tuple2(String, String)(\{_:k\},\{_:v\}))
	\}
	const tinHeaders = Array(String)(headers)
	const response = Response(\{_:responseRaw.status\},\{_:tinHeaders\}, \{_:jsonRes\})
	return response;
\}
"

Http.send: (request: Request | Error) ~> Response | Error = external

Response.isOk = (self: Response) -> self.status == 200
