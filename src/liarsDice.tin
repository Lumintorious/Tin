getRandomInt: (Number, Number) -> Number = external

Roll = 1 | 2 | 3 | 4 | 5 | 6
dicePerPlayer = 5
Cup = data:
	dice: Array[Roll]

Roll.roll = () -> getRandomInt(1, 7): Roll
Cup.roll = () -> Cup(Roll.roll(), Roll.roll(), Roll.roll(), Roll.roll(), Roll.roll())

binomialCoefficient = (n: Number, k: Number) ->
	if k > n,
		0
	else
		coefficient = var 1
		i = var 0
		while i < k,
			set coefficient = coefficient * (n - i) / (i + 1)
			set i = i + 1
		coefficient

binomialProbability = (k: Number, n: Number, p: Number) ->
	pComplement = 1 - p
	nMinusK = n - k
	coefficient = binomialCoefficient(n, k)

	return coefficient * (p ** k) * (pComplement ** nMinusK)

getFaceCount = (bidFace: Number, cup: Cup) ->
	i = var 0
	count = var 0
	while i < cup.dice.length(),
		if cup.dice.at(i) == bidFace,
			set count = count + 1
		set i = i + 1
		
	return count

bidProbability = (bidCount: Number, bidFace: Number, myCup: Cup, totalCups: Number) ->
	totalDice = totalCups * dicePerPlayer
	myFaceCount = getFaceCount(bidFace, myCup)
	neededElsewhere = if bidCount > myFaceCount, bidCount - myFaceCount else 0
	remainingDice = totalDice - myCup.dice.length()

	probability = var 0
	i = var neededElsewhere
	while i < remainingDice,
		set probability = probability + binomialProbability(i, remainingDice, 1/3)
		set i = i + 1

	return probability

myCup = Cup.roll()
print(myCup.dice)
print(bidProbability(4, 3, Cup(3, 3, 4, 5, 1), 2))
