import collections/Iterable


Map.by = [K, V] -> (getKey: (v: V) -> K) -> (seq: Seq[V]) ->
	mapd = Iterable.fromArray(seq).makeIterator()
	print(K)
	print(V)
	mapd

r = Map.by((s: String) -> 1)("Hi")

# Address = struct:
# 	street: String
# 	number: Number

# Pet = struct:
# 	name: String

# Gender = "MALE" | "FEMALE"

# GenderInfo = struct:
# 	name: Gender
# 	hasPenis: Boolean
# 	canGiveBirth: Boolean

# Gender.info = (g: Gender) ->
# 	if g == "MALE", GenderInfo { "MALE", true, false }
# 	else GenderInfo { "FEMALE", false, true }

# Gender.info = Enum((g: GenderInfo) -> g.name)(
# 	GenderInfo { "MALE", true, false },
# 	GenderInfo { "FEMALE", false, true }
# )

# print(Gender.info("MALE"))

# Person = struct:
# 	name: String
# 	gender: Gender

# Parent = struct:
# 	children: Seq[Person]

# print(Map.of((1, 2)).get(1))
# next = Iterable.fromArray(1, 2, 3).makeIterator().next()
# print(next)
# # Iterable { () -> external }
