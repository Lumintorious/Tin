import lib/Http
import collections/Iterable

handleRequest = (request: Request) ->
	seq = Array.of(("Content-Type", "text"))
	Response { 200, seq, "Hello World" }

server = HttpServer.live(3000: Port, handleRequest)

Cat = struct:
	name: String
	age: Number

Mech = struct:
	material: String
	version: Number

set Console.useFieldNames = false
mechaCat = Mech { material = "Ironium", version = 3 } & Cat { name = "Whiskers", age = 3 }

# server.listen()

Type.allFields = (self: Type): Seq[(String, Field)] ->
	if self :: Struct,
		mapper = (field: Field) -> (self.name, field: Field)
		self.fields.mapSeq(mapper)
	else if self :: Intersection,
		return (self.left.allFields()) .and (self.right.allFields())
	else
		Array.empty[(String, Field)]
	
MechaCat = Cat & Mech
ggg = MechaCat.allFields()
ggg.mapSeq((pair) -> pair.right).printAll()


print(ggg.makeIterator().next())
