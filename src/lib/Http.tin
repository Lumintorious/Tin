import collections/Iterable

HttpMethod = "GET" | "POST" | "PUT" | "DELETE"
UrlParams = Seq[(String, String)]
Headers = Seq[(String, String)]
Headers.empty = Array.empty[(String, String)]

UrlString = String where:
	self.matches("^(https?:\/\/)?(?:www\.)?[a-zA-Z0-9-]+\.[a-zA-Z]\{2,\}(?:\/[a-zA-Z0-9\-\.]*)*\/?$")

Port = Number where:
	self >= 0 && self < 65536

Status = Number where:
	self > 100 && self < 600

ByteBuffer = Seq[Byte]

Url = struct:
	baseUrl: UrlString
	port: Port
	params: UrlParams

Request = struct:
	method: HttpMethod
	url: Url
	headers: Headers
	body: String

Response = struct:
	status: Number
	headers: Headers
	body: String

Url.new = (url: String, port: Number = 80, params: UrlParams = Array.empty[(String, String)]) ->
	if url !: UrlString, return Error { "Invalid URL: '{url}'" }
	if port !: Port, return Error { "Invalid Port: '{port}'" }
	
	Url { url, port, params }

Url.fromString: (String) -> Url | Error = external

Request.new = (method: HttpMethod, urlTry: Url | Error, headers: Headers = Array.empty[(String, String)], body: String = " ") ->
	Request { method, urlTry?, headers, body }

external "
export function Url$fromString(str) \{
	const url = new URL(str);
\}

export async function Http$send(request) \{
	if (request === undefined || TinErr_.__is_child(request)) \{
		return request;
	}
	const url = request[Request._s].url._
	const params = \{\};
	params.method = request[Request._s].method._
	params.headers = \{\}
	for(let i = 0; i < request[Request._s].headers._[Seq._s].length._(); i++) \{
		const elem = request[Request._s].headers._[Seq._s].at._(i)
		params.headers[elem[Tuple2._s].left._] = elem[Tuple2._s].right._
	\}

	const urlParams = new URLSearchParams();
	for(let i = 0; i < url[Url._s].params._[Seq._s].length._(); i++) \{
		const elem = url[Url._s].params._[Seq._s].at._(i)
		urlParams.set(elem[Tuple2._s].left._, elem[Tuple2._s].right._)
	\}
	
	const urlString = url[Url._s].baseUrl._ + (urlParams.length > 0 ? ('?' + urlParams.toString()): \"\")

	const responseRaw = await fetch(urlString, params);

	const jsonRes = await responseRaw.text();
	const headers = [];
	for(const [k, v] of responseRaw.headers) \{
		headers.push(Tuple2(String, String)(\{_:k\},\{_:v\}))
	\}
	const tinHeaders = Seq(String)(headers)
	const response = Response(\{_:responseRaw.status\},\{_:tinHeaders\}, \{_:jsonRes\})
	return response;
\}
"

Http.send: (request: Request | Error) ~> Response | Error = external

Response.isOk = (self: Response) -> self.status == 200

HttpServer = struct:
	port: Port
	listen: () -> Ok | Error

HttpServer.live: (port: Port, handle: (Request) -> Response | Error) -> HttpServer = external
external "
import http from 'http';

async function _readBody(req) \{
  return await new Promise((resolve, reject) => \{
    let body = '';
    req.on('data', chunk => body += chunk);
    req.on('end', () => resolve(body));
    req.on('error', reject);
  });
}

export function HttpServer$live(port, handle) \{
	
	const server = http.createServer(async (req, res) => \{
		const tinReq = Request(
			\{_: req.method},
			\{_: req.url},
			\{_: Seq(Tuple2(String, String))(Object.entries(req.headers).map(([k, v]) => Tuple2(String, String)(\{_: k\}, \{_: v\})))},
			\{_: await _readBody(req)}
		);
		const tinRes = handle(tinReq)
		tinRes[Response._s].headers._[Seq._s]._rawArray.forEach(elem => \{
			res.setHeader(elem[Tuple2._s].left._, elem[Tuple2._s].right._)
		});
		res.statusCode = tinRes[Response._s].status._;
		res.end(tinRes[Response._s].body._);
	});

	function listen() \{
		server.listen(port, () => \{
			console.log('Server running at http://localhost:' + port);
		});
		return ok;
	}
	return HttpServer(\{_: port}, \{_: listen\});
}
"