Iterator = [T] => type:
	next: () -> T?

Accessible = [T] => type:
	at: (index: Number) -> T
	length: () -> Number

makeString: (Any) -> String = external

ToString = type:
	toString: (this: Any) -> String

stringOf = (obj: Any) ->
	if obj :: ToString,
		obj.toString()
	else
		makeString(obj)

Iterable = [T] => type:
	getIterator: () -> Iterator[T]

	forEach = (this: Iterable[T], fn: (T) -> Nothing) ->
		iterator = this.getIterator()
		current = iterator.next()
		while current != nothing,
			fn(current)
			set current = iterator.next()

	mkString = (this: Iterable[T], separator: String, left: String, right: String) ->
		string = ""
		fn = (t: T) ->
			comma = if string == "", "" else separator
			set string = "{string}{comma}{t}"
		this.forEach(fn)
		"{left}{string}{right}"

	count = (this: Iterable[T], pred: (T) -> Boolean) ->
		num = 0
		this.forEach((t: T) -> if pred(t), set num = num + 1)
		num

	