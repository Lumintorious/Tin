Iterator = [T] -> data:
	next: () ~> var T?

Iterable = [T] -> data:
	makeIterator: () -> Iterator[T]

MapOps = [K, V] -> data:
	get: (K) -> V?
	with: (K, V) -> Map[K, V]

Map = [K, V] => MapOps[K, V] & Iterable[(K, V)]

external "
	function _arrToMap(arr) \{
		return new Map(arr[Array._s]._rawArray.map(tup => [tup[Tuple2._s].left[0], tup[Tuple2._s].right[0]]))
	\}

	function _mapFromJsMap(K, V, jsMap) \{
		return ((MapOps(K, V)([function(k)\{ return jsMap.get(k)\}], [function(k, v)\{
			const newJsMap = new Map(jsMap);
			newJsMap.set(k, v);
			return _mapFromJsMap(K, V, newJsMap);
		\}]))._and(ToString([function() \{
			return `Map($\{[...jsMap].map(([k, v]) => `($\{k\},$\{v\})`).toString()\})`
		\}])))._and(Iterable(Tuple2(K, V))([() => \{
			const entryArray = [...jsMap]
			let i = 0;
			if (i < entryArray.length) \{
				const entry = entryArray[i]
				return Tuple2(K, V)(entry[0], entry[1])
			\}
			return 1 + 2
		\}]))
	\}
	export const Map$of = (K, V) => (arr) => \{
		const jsMap = _arrToMap(arr)
		const map = _mapFromJsMap(K, V, jsMap)
		return map;
	\}
"

Map@of: [K, V] -> (kvs: Array[(K, V)]) -> Map[K, V] = external

Iterable.forEach = [T] -> (self: Iterable[T], fn: (T) ~> Nothing) ~>
	iterator = self.makeIterator()
	current = var iterator.next()

	while current !: Nothing,
		fn(current)
		set current = iterator.next()

Iterable.fromArray = [T] -> (arr: Array[T]) ->
	Iterable[T](() ->
		i = var -1
		Iterator[T](() ~>
			set i = i + 1
			arr.at(i)
		)
	)

Iterable.fold = [T, S] -> (iterable: Iterable[T], start: S, combine: (T, S) -> S) ->
	sum = var start
	iterable.forEach((e: T) ~>
		set sum = combine(e, sum)
		nothing
	)

	sum

x = 2

external "
export const Array$fromIterator = (T) => (iter) => \{
	const arr = [];
	let i = iter[Iterator._s].next._()
	while(i !== undefined && (typeof i === 'object' && i._ !== undefined)) \{
		arr.push(i)
		i = iter[Iterator._s].next._()
	\}
	return Array(T)(arr)

\}

"

Array.fromIterator: [T] -> (Iterator[T]) -> Array[T] = external
Array.fromIterable = [T] -> (iterable: Iterable[T]) ->
	Array.fromIterator(iterable.makeIterator())

