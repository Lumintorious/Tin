Iterator = [T] => data:
	next: () ~> T?

Accessible = [T] => data:
	at: (index: Number) -> T
	length: () -> Number

makeString: (Anything) -> String = external

ToString = data:
	toString: (this: Anything) -> String

stringOf = (obj: Anything) ->
	if obj :: ToString,
		obj.toString()
	else
		makeString(obj)

Iterable = [T] => data:
	getIterator: () -> Iterator[T]

	forEach = (this: Iterable[T], fn: (T) ~> Nothing): var Anything ~>
		iterator = this.getIterator()
		current: var T? = iterator.next()
		if current != nothing,
			set current = nothing
		# while current != nothing,
		# 	fn(current)
		# 	set current = iterator.next()

	mkString = (this: Iterable[T], separator: String, left: String, right: String): var String ~>
		string: var String = ""
		fn = (t: T): var String ~>
			comma = if string == "", "" else separator
			set string = "{string}{comma}{t}"
		this.forEach(fn)
		"{left}{string}{right}"

	count = (this: Iterable[T], pred: (T) -> Boolean): var Number ~>
		num: var Number = 0
		this.forEach((t: T): var Anything ~> if pred(t), set num = num + 1)
		num


ssss = 2
	