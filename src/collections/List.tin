import collections/Iterable

ListHead = [T] => data:
	value: T
	rest: ListHead[T]?

List = [T] => (ListHead[T] & Iterable[T] & Accessible[T] & ToString)?

List@iterator = [T] -> (list: ListHead[T]?) ->
	currentList: var ListHead[T]? = list
	nextF = (): var T? ~>
		if currentList != nothing,
			result = currentList.value
			set currentList = currentList.rest
			result
		else
			nothing

	Iterator[T](nextF)

List@accessible = [T] -> (list: ListHead[T]): var Accessible[T] ->
	length = (): var Number ~>
		num: var Number = 0
		l = list
		while l != nothing,
			set num = num + 1
		num

	at = (index: Number): var T  ~>
		currentIndex: var Number = 0
		l: var ListHead[T] = list
		while currentIndex < index,
			if l != nothing,
				set l = l.rest
			set currentIndex = currentIndex + 1
		l.value

	return Accessible[T](at, length)

List@of = [T] -> (arr: Array[T]): var List[T] ~>
	i: var Number = arr.length()
	list = nothing: ListHead[T]?

	while i > 0,
		set i = i - 1
		list = ListHead[T](arr.at(i), list)

	ssss = Iterable[T]
	iterable = Iterable[T](() -> List@iterator[T](list))
	toStr = (this: Anything) ~> iterable.mkString(",", "List(", ")")
		
	return list & iterable & List@accessible[T](list) & ToString(toStr)

# List@fromIterator = [T] -> (getIterator: () -> Iterator[T]) ~>
# 	list: var ListHead[T]? = nothing
# 	iterator = getIterator()
# 	current = var (iterator.next())
	
# 	while current != nothing,
# 		set list = ListHead[T](current, list)
# 		set current = iterator.next()

# 	return var (list & Iterable[T](() -> List@iterator[T](list)))

List@range = (start: Number, end: Number) ->
	list: var ListHead[Number]? = nothing
	st: var Number = start
	en = end

	unchecked while st < en,
		set list = ListHead[Number](st, list)
		set st = st + 1

	return var (list & Iterable[Number](() -> List@iterator[Number](list)))

li = 0
